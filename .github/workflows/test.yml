name: Test
on:
  push:
    branches:
      - "**"
    tags-ignore:
      - "**"
  pull_request:

jobs:
  perl:
    name: Perl
    permissions:
      contents: read
    runs-on: ubuntu-latest
    if: contains(github.event_name, 'pull_request') || github.event_name == 'push'
    steps:
    - name: checkout-merge
      if: contains(github.event_name, 'pull_request')
      uses: actions/checkout@v4
      with:
        ref: refs/pull/${{github.event.pull_request.number}}/merge
    - name: checkout
      if: github.event_name == 'push'
      uses: actions/checkout@v4
    - name: perl configuration
      id: perl-config
      run: |
        : Perl configuration
        perl_modules="$(
          echo "
          Module::Build::Tiny
          Devel::Cover
          Devel::Cover::Report::Html
          Capture::Tiny
          Hash::Merge
          Text::Hunspell
          " |sort|xargs)"
        (
          echo "perl-modules=$perl_modules"
        ) >> "$GITHUB_OUTPUT"
    - name: dependencies
      id: depedencies
      shell: bash
      env:
        required_perl_modules: ${{ steps.perl-config.outputs.perl-modules }}
        GH_TOKEN: ${{ github.token }}
      run: |
        : Dependencies
        (
          cpan_modules=$(
            for module in $required_perl_modules; do
              perl -e "use $module; 1;" > /dev/null 2>/dev/null || echo $module
            done | xargs
          )
          command -v cover >/dev/null 2>/dev/null || APT_PACKAGES="libdevel-cover-perl $APT_PACKAGES"
          if command -v apt-get >/dev/null 2>/dev/null && ! command -v cpanm >/dev/null 2>/dev/null; then
            APT_PACKAGES="cpanminus $APT_PACKAGES"
          fi
          if [ -n "$APT_PACKAGES" ]; then
            # Skip installing pacakge docs to make the man-db trigger much faster
            (for exclude in doc man info; do echo "path-exclude /usr/share/$exclude/*"; done) |
              sudo tee /etc/dpkg/dpkg.cfg.d/01_nodoc > /dev/null
            if ! sudo apt-get install -y -q $APT_PACKAGES 2>/dev/null; then
              disable_apt_repository() {
                parent=/etc/apt/sources.list.d
                if [ -f "$parent/$1" ]; then
                  ${SUDO:+"$SUDO"} mv "$parent/$1" "$parent/$1.disabled"
                fi
              }
              for repository in azure-cli.sources github_git-l"f"s.list micro"soft"-prod.list; do
                disable_apt_repository "$repository"
              done
              if [ -f /etc/apt/sources.list.d/ubuntu.sources ]; then
                ${SUDO:+"$SUDO"} perl -pi.disabled -e '
                  if (/Components:/) { s/\b(?:restricted|multiverse)\b//g; };
                  if (/Suites:/) { s/\b\w+-(?:updates|backports)\b//g; };
                ' /etc/apt/sources.list.d/ubuntu.sources
              else
                ${SUDO:+"$SUDO"} perl -pi.disabled -e '
                  s%^(deb https?://\S+\s+\w+-.*)%#$1%;
                  next if /^#/;
                  s%^(deb https?://\S+\s+\w+ multiverse)%#$1%;
                  s%\bmain restricted\b%main # restricted%;
                ' /etc/apt/sources.list
              fi

              sudo apt-get update &&
              sudo apt-get install -y -q $APT_PACKAGES
            fi
            if ! command -v gh >/dev/null; then
              apt_policy=$(mktemp)
              apt-cache policy gh > "$apt_policy"
              if grep -q 'Candidate: 2.4.0' "$apt_policy"; then
                extra_bin=~/bin
                mkdir -p "$extra_bin"
                echo "gh-location=$extra_bin/gh" >> "$GITHUB_OUTPUT"
                echo "$extra_bin" >> "$GITHUB_PATH"
              else
                sudo apt-get install gh
              fi
            fi
          fi
          if [ -n "$cpan_modules" ]; then
            if ! command -v cpanm >/dev/null 2>/dev/null; then
              curl -s -S -L https://cpanmin.us | perl - --sudo App::cpanminus
            fi
            perl `command -v cpanm` -S --notest $cpan_modules
          fi
        ) > /tmp/prework || (cat /tmp/prework && false)

    - name: gh-program-downloader
      if: steps.depedencies.outputs.gh-location
      uses: ./actions/gh-program-downloader
      with:
        repository: cli/cli
        destination: ${{ steps.depedencies.outputs.gh-location }}
        file-re: bin/
        trace: 1

    - name: test
      id: test
      shell: bash
      env:
        required_perl_modules: ${{ steps.perl-config.outputs.perl-modules }}
        GH_TOKEN: ${{ github.token }}
      run: |
        : Test
        ./Build.PL
        ./Build build
        (
          cd lib;
          for m in $(
            find * -name '*.pm' |
              perl -pe 's!/!::!g;s/\.pm$//'
          ); do
            perl -I. -M$m -e ''
          done
        )
        cover_output=$(mktemp)
        perl `command -v cover` -test 2>&1 | tee -a "$cover_output" || failed=$?
        echo '::group::cover'
        (
          echo '# Tests'
          echo 'test|result';
          echo '-|-';
          perl -ne '
            $new_state = 0;
            if (m<t/.*\.t \.+ ok|^---|^\s*Failed test:|^\s*Non-zero exit status:|\(Wstat>) {
              $new_state = 1;
            }
            next unless ($new_state || $state);
            last if /^--+(?: --+){3}/;
            $state = $new_state;
            next unless /\w/;
            next if $last_line eq $_;
            next if /\QCould not open file (no-such-file)\E/;
            $last_line = $_;
            s/ \.+ ok/|:white_check_mark:/ || s/ \.+ /|/;
            s/^\s+(.*):\s*/... $1|/;
            s/\s+(\(Wstat)/|:x: $1/ unless /\|/;
            s/All tests successful\./All tests|:white_check_mark:/;
            print' "$cover_output"
          echo
          echo '<details><summary>Details</summary>'
          echo
          echo '```'
          cat "$cover_output"
          echo '```'
          echo '</details>'
        ) >> "$GITHUB_STEP_SUMMARY"
        echo ::endgroup::
        exit $failed
    - name: calculate coverage
      id: coverage
      if: success() || failure()
      run: |
        : Calculate coverage
        cover_command=`command -v cover`
        if [ -n "$cover_command" ]; then
        perl `command -v cover` -ignore /usr/bin/shasum -report html
        fi
        if [ -e cover_db/coverage.html ]; then
          (
            t/html-to-markdown.pl cover_db/coverage.html
          ) >> "$GITHUB_STEP_SUMMARY"
        fi
        echo 'ran=1' >> "$GITHUB_OUTPUT"
    - name: store-coverage
      if: (success() || failure()) && (steps.coverage.outputs.ran == 1)
      uses: actions/upload-artifact@v4
      timeout-minutes: 5
      with:
        name: "check-spelling-coverage-${{ github.run_id }}"
        path: |
          cover_db

  standalone:
    name: Standalone
    permissions:
      contents: read
    runs-on: ubuntu-latest
    if: contains(github.event_name, 'pull_request') || github.event_name == 'push'
    steps:
    - name: checkout-merge
      if: contains(github.event_name, 'pull_request')
      uses: actions/checkout@v4
      with:
        ref: refs/pull/${{github.event.pull_request.number}}/merge
    - name: checkout
      if: github.event_name == 'push'
      uses: actions/checkout@v4
    - name: test
      id: test
      shell: bash
      run: |
        : Test
        cat <<'EOF' >> "$GITHUB_STEP_SUMMARY"
        # Standalone self-test of unknown-words

        :information_source: Standalone does not have access to workflow configuration.
        As such, it doesn't know about extra dictionaries.

        EOF
        step_summary="$GITHUB_STEP_SUMMARY"
        output="$GITHUB_OUTPUT"
        for github_var in $(
          git ls-files -z |
          xargs -0 grep GITHUB_ |
          perl -pe 's/[^_A-Z]+/\n/g' |
          grep ^GITHUB_ |
          sort -u
        ); do
          eval unset $github_var
        done
        unset ACT
        export GITHUB_STEP_SUMMARY="$step_summary"
        export GITHUB_OUTPUT="$output"
        ./unknown-words.sh || true
        grep -q '@check-spelling-bot Report' "$GITHUB_STEP_SUMMARY"
    - name: upload artifact
      id: upload-artifact
      uses: actions/upload-artifact@v4
      with:
        name: standalone-artifact
        path: |
          ${{ steps.test.outputs.internal_state_directory }}
    - name: artifact note
      if: steps.upload-artifact.outcome == 'success'
      run: |
        : Artifact note
        cat <<EOF >> "$GITHUB_STEP_SUMMARY"
        # apply.pl and artifact
        You should be able to use [\`apply.pl\`](https://raw.githubusercontent.com/$GITHUB_REPOSITORY/$GITHUB_SHA/apply.pl) with standalone-artifact.
        EOF
